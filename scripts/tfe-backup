#!/usr/bin/env python
from __future__ import print_function
from tfe_backup import workspace
from tfe_backup import workspace_variables
from tfe_backup import team_access
from tfe_backup import tfe_session
import os
import json
from subprocess import Popen, PIPE
import shlex
import sys
import hcl

class TFEBackupException(Exception): pass


def hcl_config(api, config, token=False):
    try:
        if token:
            return token
        elif os.environ.get("ATLAS_TOKEN"):
            return os.environ.get("ATLAS_TOKEN")
        else:
            config_api_url = api.split("https://")[1]
            with open(config, 'r') as fp:
                obj = hcl.load(fp)
            token = obj.get('credentials').get(config_api_url).get('token')
            os.environ["ATLAS_TOKEN"] = token
            return token
    except Exception as e:
        raise TFEBackupException("No Atlas Token Set!\n")

def _call(cmd, error_message=None):
    p = Popen(shlex.split(cmd), 
            stdout=PIPE,
            stderr=PIPE)
    out, err = p.communicate()
    if err:
        if error_message:
            sys.stderr.write(error_message)
            sys.stderr.write("\n")
        sys.stderr.write(str(err))
        sys.stderr.write("\n")
        sys.exit(1)

def sanitize_path(path):
    path = os.path.expandvars(path)
    path = os.path.expanduser(path)
    path = os.path.abspath(path)
    return path


def which_terraform():
    if os.system("which terraform"):
        sys.stderr.write("This utility requires Terraform. Please download and install.\n")
        sys.exit(1)


def parse_variables(basedir, ws, ws_name, skip_keys):
    try:
        with open(os.path.join(basedir, "{0}_vars.tf".format(ws_name)), "w") as vars_file:
            for _var in ws.variables(ws_name, skip_keys):
                vars_file.write(_var)
    except Exception as e:
        sys.stderr.write(str(e))
        sys.stderr.write("\n")
    

def parse_teams(basedir, ws, ws_name):
    try:
        with open(os.path.join(basedir, "{0}_teams.tf".format(ws_name)), "w") as teams_file:
            for _team_access in ws.team_access(ws_name):
                teams_file.write(_team_access)
    except Exception as e:
        sys.stderr.write(str(e))
        sys.stderr.write("\n")


def parse_workspace(org, _ws, basedir, new_workspace_name=False, filename=False):
    print("Org: ", org, "Workspace: ", _ws)
    ws = workspace.TFEWorkSpace(org, _ws)
    if not filename:
        _filename = os.path.join(basedir, "{0}.tf".format(_ws))
    else:
        _filename = os.path.join(basedir, "{0}.tf".format(filename))
    if new_workspace_name:
        _ws = new_workspace_name
    try:
        with open(_filename, "w") as workspace_file:
            workspace_file.write(
                ws.rendered(force=True, 
                    organization_name="${var.organization}", 
                    workspace_name=_ws
                )
            )
    except Exception as e:
        if os.environ.get("TFE_BACKUP_DEBUG"):
            print(json.dumps(ws._workspace_response,
                indent=4,
                sort_keys=True,
                separators=(',',':')))
        sys.stderr.write(str(e))
        sys.stderr.write("\n")
    return _ws

    

def add_vars(_vars):
    for var in _vars:
        workspace_variables.TFEWorkSpaceVariables.undefined_variables.add(var)


def dump_vars(basedir):
    with open(os.path.join(basedir, "variables.tf"), "w") as vars_file:
        for twsvar in workspace_variables.TFEWorkSpaceVariables.define_variables():
            vars_file.write(twsvar)


def tfe_error():
    sys.stderr.write(
        "Could not find workspaces for Organization.\n"
    )
    if not os.environ.get("ATLAS_TOKEN"):
        sys.stderr.write(
            "ATLAS_TOKEN environment Vairable is not set.\n"
        )
    sys.exit(1)

def main(opt):
    basedir = sanitize_path(opt.basedir)
    workspace.TFEWorkSpace.base_url = opt.api
    workspace_variables.TFEWorkSpaceVariables.base_url = opt.api
    workspace_variables.TFEWorkSpaceVariables.basedir = basedir
    team_access.TFETeamAccess.base_url = opt.api
    team_access.TFETeamAccess.basedir = basedir

    print("Org: ", opt.tfe_organization)
    
    try:
        # testing for workspaces
        found_workspaces = [x for x in workspace.TFEWorkSpace.list(opt.tfe_organization)]
    except TypeError as e:
        tfe_error()

    for _ws in found_workspaces:
        if opt.tfe_workspace and _ws != opt.tfe_workspace:
            continue
        
        if not opt.output:
            ws_name = parse_workspace(opt.tfe_organization, _ws, basedir, 
                new_workspace_name=opt.new_workspace_name)
        else:
            parse_workspace(opt.tfe_organization, _ws, basedir, 
                new_workspace_name=opt.new_workspace_name, 
                filename=opt.output)
        
        ws_obj = workspace.TFEWorkSpace(opt.tfe_organization, _ws)
        parse_variables(
            basedir,
            ws_obj, 
            ws_name, 
            opt.skip_keys
        )
        
        parse_teams(
            basedir,
            ws_obj,
            ws_name
        )
    
    # these variables will always need to be added
    add_vars(("oauth_token_id", "organization"))
    if opt.add_vars:
        add_vars(opt.add_vars)

    dump_vars(basedir)

    # perform post processing to validate configurations
    os.chdir(sanitize_path(opt.basedir))

    # make sure terraform is installed
    which_terraform()

    if opt.fmt:
        _call("terraform fmt")

    if opt.init or opt.validate:
        tfvars_file = os.path.join(basedir, "terraform.tfvars")
        with open(tfvars_file, "w") as tfvars:
            for _var in workspace_variables.TFEWorkSpaceVariables.undefined_variables:
                tfvars.write('{0}="{1}"\n'.format(_var, opt.tfe_organization))
        _call("terraform init")
        

    if opt.validate:
        _call("terraform validate")

    if opt.init or opt.validate:
        tfvars_file = os.path.join(basedir, "terraform.tfvars")
        os.unlink(tfvars_file)


if __name__ == '__main__':
    from optparse import OptionParser, OptionGroup
    import argparse
    parser = argparse.ArgumentParser(prog='tfe-backup')
    # parser = OptionParser()
    parser.add_argument('--api', default='https://app.terraform.io')
    parser.add_argument('--token',
        dest="tfe_token",
        help="Terraform Enterprise Token"
    )
    parser.add_argument('--config', 
        default=sanitize_path("~/.terraformrc"),
        help="Specify Location of terraformrc Config file."
    )
    parser.add_argument('-o', '--org', 
        dest="tfe_organization", 
        required=True,
        help="Terraform Enterprise Organization"
    )
    parser.add_argument('-w', '--workspace', 
        dest="tfe_workspace", 
        default=False,
        help="Terraform Enterprise Workspace"
    )
    parser.add_argument('--output',
        help="Output File. Defaults to name of Workspace"
    )
    parser.add_argument('--new-ws', 
        dest="new_workspace_name",
        help="Name of new Workspace. Only valid if running against one workspace"
    )
    parser.add_argument('--vars', 
        action='append', 
        dest='add_vars',
        help="Add extra arguments"
    )
    parser.add_argument('--fmt', 
        action='store_true', 
        default=False,
        help="Run Terraform FMT on Output Files"
    )
    parser.add_argument('--init', 
        action='store_true', 
        default=False,
        help="Run Terraform Init in order to pull down Providers"
    )
    parser.add_argument('--validate', 
        action='store_true', 
        default=False,
        help="Validate Terraform Configuration."
    )
    parser.add_argument('-b', '--basedir', 
        default=os.path.abspath(os.environ.get("PWD")),
        help="Base Directory for output files"
    )
    parser.add_argument('--skip', 
        action='append', 
        dest='skip_keys',
        help="Skip these variables"
    )
    opt = parser.parse_args()

    try:
        token = hcl_config(opt.api, sanitize_path(opt.config), opt.tfe_token)
        session = tfe_session.TFESession(opt.api, token)
    except TFEBackupException as tfe_exception:
        sys.stderr.write(str(tfe_exception))
        sys.exit(1)

    try:
        main(opt)
    except KeyboardInterrupt:
        sys.exit(1)
    
